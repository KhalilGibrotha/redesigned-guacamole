---
- name: "Markdown â†’ Confluence Automation"
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars/vars.yml

  tasks:

    - name: "Pre-flight checks"
      block:
        - name: "Verify template files exist"
          ansible.builtin.stat:
            path: "{{ item }}"
          register: template_check
          loop:
            - docs/main.md.j2
            - docs/platform_governance.md.j2
            - docs/platform_runbook.md.j2
            - docs/operator_runbook.md.j2
            - docs/training_enablement.md.j2

        - name: "Fail if templates are missing"
          ansible.builtin.fail:
            msg: "Missing template file: {{ item.item }}"
          when: not item.stat.exists
          loop: "{{ template_check.results }}"

        - name: "Check pandoc availability"
          ansible.builtin.command: which pandoc
          register: pandoc_available
          changed_when: false
          failed_when: pandoc_available.rc != 0

    - name: "Render markdown templates"
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "/tmp/{{ item | basename | replace('.j2', '') }}"
        mode: '0644'
      loop:
        - docs/main.md.j2
        - docs/platform_governance.md.j2
        - docs/platform_runbook.md.j2
        - docs/operator_runbook.md.j2
        - docs/training_enablement.md.j2

    - name: "Convert Markdown to HTML"
      block:
        - name: "Debug - Check if markdown files exist"
          ansible.builtin.stat:
            path: "/tmp/{{ item }}"
          register: md_files_check
          loop:
            - main.md
            - platform_governance.md
            - platform_runbook.md
            - operator_runbook.md
            - training_enablement.md

        - name: "Debug - Show markdown file status"
          ansible.builtin.debug:
            msg: "File /tmp/{{ item.item }} exists: {{ item.stat.exists }}, size: {{ item.stat.size | default('N/A') }}"
          loop: "{{ md_files_check.results }}"

        - name: "Debug - Check pandoc availability"
          ansible.builtin.command: which pandoc
          register: pandoc_check
          changed_when: false

        - name: "Debug - Show pandoc version"
          ansible.builtin.command: pandoc --version
          register: pandoc_version
          changed_when: false

        - name: "Debug - Show pandoc info"
          ansible.builtin.debug:
            msg: "Pandoc found at: {{ pandoc_check.stdout }}"

        - name: "Debug - Show pandoc conversion command"
          ansible.builtin.debug:
            msg: |
              About to convert: /tmp/{{ item }}
              Command: pandoc "/tmp/{{ item }}" -f markdown -t html -o "/tmp/{{ item }}.html"
              Expected output: /tmp/{{ item }}.html
          loop:
            - main.md
            - platform_governance.md
            - platform_runbook.md
            - operator_runbook.md
            - training_enablement.md

        - name: "Convert markdown files to HTML with error handling"
          ansible.builtin.shell: |
            set -e
            echo "Converting /tmp/{{ item }} to HTML..."
            if [ ! -f "/tmp/{{ item }}" ]; then
              echo "ERROR: Source file /tmp/{{ item }} does not exist"
              exit 1
            fi

            echo "File size: $(stat -c%s "/tmp/{{ item }}") bytes"
            echo "File content preview:"
            head -3 "/tmp/{{ item }}"
            echo "---"

            # Ensure output directory is writable
            touch "/tmp/{{ item }}.html.tmp"

            # Run pandoc with verbose output
            pandoc "/tmp/{{ item }}" -f markdown -t html -o "/tmp/{{ item }}.html.tmp" 2>&1

            # Check if output was created successfully
            if [ ! -f "/tmp/{{ item }}.html.tmp" ]; then
              echo "ERROR: Pandoc failed to create output file"
              exit 1
            fi

            # Move temp file to final location
            mv "/tmp/{{ item }}.html.tmp" "/tmp/{{ item }}.html"

            echo "SUCCESS: Created /tmp/{{ item }}.html ($(stat -c%s "/tmp/{{ item }}.html") bytes)"
          register: pandoc_conversion
          loop:
            - main.md
            - platform_governance.md
            - platform_runbook.md
            - operator_runbook.md
            - training_enablement.md
          changed_when: true

        - name: "Debug - Show conversion results"
          ansible.builtin.debug:
            msg: "Conversion result for {{ item.item }}: {{ 'SUCCESS' if item.rc == 0 else 'FAILED' }}"
          loop: "{{ pandoc_conversion.results }}"

        - name: "Debug - Show any conversion errors"
          ansible.builtin.debug:
            msg: "Error for {{ item.item }}: {{ item.stderr | default('No errors') }}"
          loop: "{{ pandoc_conversion.results }}"
          when: item.rc != 0

        - name: "Verify HTML files were created"
          ansible.builtin.stat:
            path: "/tmp/{{ item }}.html"
          register: html_files_check
          loop:
            - main.md
            - platform_governance.md
            - platform_runbook.md
            - operator_runbook.md
            - training_enablement.md

        - name: "Debug - Show HTML file verification"
          ansible.builtin.debug:
            msg: >-
              HTML file /tmp/{{ item.item }}.html exists: {{ item.stat.exists }},
              size: {{ item.stat.size | default('N/A') }}
          loop: "{{ html_files_check.results }}"

      rescue:
        - name: "Handle conversion errors"
          ansible.builtin.debug:
            msg: "Markdown to HTML conversion failed. Please check the debug output above."

        - name: "Show environment info for troubleshooting"
          ansible.builtin.debug:
            msg: |
              Troubleshooting info:
              - Current user: {{ ansible_env.USER | default('unknown') }}
              - Working directory: {{ ansible_env.PWD | default('unknown') }}
              - Pandoc location: {{ pandoc_check.stdout | default('Not found') }}
              - /tmp permissions: {{ ansible_env.USER | default('current user') }} should have write access

        - name: "Fail with helpful message"
          ansible.builtin.fail:
            msg: |
              Markdown to HTML conversion failed. Common issues:
              1. Pandoc not installed or not in PATH
              2. Source markdown files missing or corrupted
              3. Insufficient permissions to write to /tmp
              4. Pandoc version compatibility issues

              Manual test: pandoc /tmp/main.md -f markdown -t html -o /tmp/test.html

    - name: "Publish to Confluence"
      block:

        - name: "Debug - Show Confluence API call details"
          ansible.builtin.debug:
            msg: |
              Confluence API Configuration:
              Base URL: {{ confluence_url }}
              Space: {{ confluence_space }}
              Main page title: {{ project_name }} Documentation
              Main page URL: {{ confluence_url }}/rest/api/content

        - name: "Ensure main page exists"
          ansible.builtin.uri:
            url: "{{ confluence_url }}/rest/api/content"
            method: POST
            headers:
              Authorization: "Basic {{ confluence_auth }}"
              Content-Type: "application/json"
            body_format: json
            body:
              type: page
              title: "{{ project_name }} Documentation"
              space:
                key: "{{ confluence_space }}"
              body:
                storage:
                  value: "{{ lookup('file', '/tmp/main.md.html') }}"
                  representation: storage
          register: main_page
          failed_when: false

        - name: "Debug - Show main page creation result"
          ansible.builtin.debug:
            msg: |
              Main page creation result:
              Status: {{ main_page.status }}
              Response: {{ main_page.json | default('No JSON response') | to_nice_json }}
              URL used: {{ confluence_url }}/rest/api/content

        - name: "Get main page ID if exists"
          ansible.builtin.uri:
            url: >-
              {{ confluence_url }}/rest/api/content?title={{ (project_name + ' Documentation') | urlencode }}&spaceKey={{ confluence_space }}&expand=version
            method: GET
            headers:
              Authorization: "Basic {{ confluence_auth }}"
              Content-Type: "application/json"
          register: main_page_query
          when: main_page.status != 200

        - name: "Debug - Show main page query details"
          ansible.builtin.debug:
            msg: |
              Main page query details:
              URL: {{ confluence_url }}/rest/api/content?title={{ (project_name + ' Documentation') | urlencode }}&spaceKey={{ confluence_space }}&expand=version
              Status: {{ main_page_query.status | default('Not executed') }}
              Response: {{ main_page_query.json | default('No response') | to_nice_json }}
          when: main_page.status != 200

        - name: "Debug - Show update details"
          ansible.builtin.debug:
            msg: |
              Main page update details:
              Page ID: {{ main_page_query.json.results[0].id | default('Not found') }}
              Current version: {{ main_page_query.json.results[0].version.number | default('Unknown') }}
              Update URL: {{ confluence_url }}/rest/api/content/{{ main_page_query.json.results[0].id | default('NO_ID') }}
          when:
            - main_page_query is defined
            - main_page_query.status == 200
            - main_page_query.json is defined
            - main_page_query.json.results is defined
            - main_page_query.json.results | length > 0

        - name: "Update main page if exists"
          ansible.builtin.uri:
            url: >-
              {{ confluence_url }}/rest/api/content/{{ main_page_query.json.results[0].id }}
            method: PUT
            headers:
              Authorization: "Basic {{ confluence_auth }}"
              Content-Type: "application/json"
            body_format: json
            body:
              version:
                number: "{{ main_page_query.json.results[0].version.number + 1 }}"
              title: "{{ project_name }} Documentation"
              type: page
              body:
                storage:
                  value: "{{ lookup('file', '/tmp/main.md.html') }}"
                  representation: storage
          register: main_page_update
          when:
            - main_page_query is defined
            - main_page_query.status == 200
            - main_page_query.json is defined
            - main_page_query.json.results is defined
            - main_page_query.json.results | length > 0

        - name: "Debug - Show main page update result"
          ansible.builtin.debug:
            msg: |
              Main page update result:
              Status: {{ main_page_update.status | default('Not executed') }}
              Response: {{ main_page_update.json | default('No response') | to_nice_json }}
          when: main_page_update is defined


        - name: "Try to create child page"
          ansible.builtin.uri:
            url: "{{ confluence_url }}/rest/api/content"
            method: POST
            headers:
              Authorization: "Basic {{ confluence_auth }}"
              Content-Type: "application/json"
            body_format: json
            body:
              type: page
              title: "{{ item.title }}"
              space:
                key: "{{ confluence_space }}"
              ancestors:
                - id: >-
                    {{ main_page.json.id if main_page.status == 200
                    else main_page_query.json.results[0].id }}
              body:
                storage:
                  value: "{{ lookup('file', '/tmp/' + item.file + '.html') }}"
                  representation: storage
          register: create_child_page
          failed_when: false
          loop: "{{ child_pages }}"

        - name: "Debug - Show child page creation details"
          ansible.builtin.debug:
            msg: |
              Child page creation details:
              Title: {{ item.title }}
              File: {{ item.file }}
              Parent ID: {{ main_page.json.id if main_page.status == 200 else main_page_query.json.results[0].id }}
              URL: {{ confluence_url }}/rest/api/content
              Status: {{ create_child_page.results[ansible_loop.index0].status | default('Not executed') }}
          loop: "{{ child_pages }}"
          loop_control:
            extended: true
          when: create_child_page is defined

        - name: "Query existing child page"
          ansible.builtin.uri:
            url: >-
              {{ confluence_url }}/rest/api/content?title={{ item.title | urlencode }}&spaceKey={{ confluence_space }}&expand=version
            method: GET
            headers:
              Authorization: "Basic {{ confluence_auth }}"
              Content-Type: "application/json"
          register: child_page_query
          when: create_child_page.results[ansible_loop.index0].status != 200
          loop: "{{ child_pages }}"
          loop_control:
            extended: true

        - name: "Debug - Show child page query details"
          ansible.builtin.debug:
            msg: |
              Child page query details:
              Title: {{ item.title }}
              URL: {{ confluence_url }}/rest/api/content?title={{ item.title | urlencode }}&spaceKey={{ confluence_space }}&expand=version
              Status: {{ child_page_query.results[ansible_loop.index0].status | default('Not executed') }}
              Response: {{ child_page_query.results[ansible_loop.index0].json | default('No response') | to_nice_json }}
          loop: "{{ child_pages }}"
          loop_control:
            extended: true
          when: child_page_query is defined and child_page_query.results is defined

        - name: "Update child page content"
          ansible.builtin.uri:
            url: >-
              {{ confluence_url }}/rest/api/content/{{
                child_page_query.results[ansible_loop.index0].json.results[0].id
              }}
            method: PUT
            headers:
              Authorization: "Basic {{ confluence_auth }}"
              Content-Type: "application/json"
            body_format: json
            body:
              version:
                number: >-
                  {{ child_page_query.results[ansible_loop.index0].json.results[0].version.number + 1 }}
              title: "{{ item.title }}"
              type: page
              ancestors:
                - id: >-
                    {{ main_page.json.id if main_page.status == 200
                    else main_page_query.json.results[0].id }}
              body:
                storage:
                  value: "{{ lookup('file', '/tmp/' + item.file + '.html') }}"
                  representation: storage
          when:
            - child_page_query is defined
            - child_page_query.results[ansible_loop.index0].status == 200
            - child_page_query.results[ansible_loop.index0].json.results is defined
            - child_page_query.results[ansible_loop.index0].json.results | length > 0
          loop: "{{ child_pages }}"
          loop_control:
            extended: true

        - name: "Debug - Show child page update details"
          ansible.builtin.debug:
            msg: |
              Child page update details:
              Title: {{ item.title }}
              Page ID: {{ child_page_query.results[ansible_loop.index0].json.results[0].id | default('Not found') }}
              Current version: {{ child_page_query.results[ansible_loop.index0].json.results[0].version.number | default('Unknown') }}
              Update URL: {{ confluence_url }}/rest/api/content/{{ child_page_query.results[ansible_loop.index0].json.results[0].id | default('NO_ID') }}
          loop: "{{ child_pages }}"
          loop_control:
            extended: true
          when:
            - child_page_query is defined
            - child_page_query.results is defined
            - child_page_query.results[ansible_loop.index0].status == 200
            - child_page_query.results[ansible_loop.index0].json is defined
            - child_page_query.results[ansible_loop.index0].json.results is defined
            - child_page_query.results[ansible_loop.index0].json.results | length > 0

    - name: "Fallback conversion and final verification"
      block:
        - name: "Fallback: Simple pandoc conversion if detailed version failed"
          ansible.builtin.command: >
            pandoc "/tmp/{{ item }}" -f markdown -t html -o "/tmp/{{ item }}.html"
          register: simple_conversion
          loop:
            - main.md
            - platform_governance.md
            - platform_runbook.md
            - operator_runbook.md
            - training_enablement.md
          loop_control:
            index_var: conversion_index
          when: pandoc_conversion.results[conversion_index].rc != 0
          changed_when: true
          failed_when: false

        - name: "Final verification of HTML files"
          ansible.builtin.stat:
            path: "/tmp/{{ item }}.html"
          register: final_html_check
          loop:
            - main.md
            - platform_governance.md
            - platform_runbook.md
            - operator_runbook.md
            - training_enablement.md

        - name: "Report final conversion status"
          ansible.builtin.debug:
            msg: |
              Final conversion status:
              {% for result in final_html_check.results %}
              - {{ result.item }}: {{ 'SUCCESS' if result.stat.exists else 'FAILED' }}
                ({{ result.stat.size | default(0) }} bytes)
              {% endfor %}

      rescue:
        - name: "Handle fallback conversion errors"
          ansible.builtin.debug:
            msg: "Fallback conversion to HTML failed. Please check the debug output above."

        - name: "Show environment info for troubleshooting"
          ansible.builtin.debug:
            msg: |
              Troubleshooting info:
              - Current user: {{ ansible_env.USER | default('unknown') }}
              - Working directory: {{ ansible_env.PWD | default('unknown') }}
              - Pandoc location: {{ pandoc_check.stdout | default('Not found') }}
              - /tmp permissions: {{ ansible_env.USER | default('current user') }} should have write access

        - name: "Fail with helpful message"
          ansible.builtin.fail:
            msg: |
              Fallback conversion to HTML failed. Common issues:
              1. Pandoc not installed or not in PATH
              2. Source markdown files missing or corrupted
              3. Insufficient permissions to write to /tmp
              4. Pandoc version compatibility issues

              Manual test: pandoc /tmp/main.md -f markdown -t html -o /tmp/test.html
