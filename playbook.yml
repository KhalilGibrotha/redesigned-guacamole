---
- name: "Markdown â†’ Confluence Automation (Dynamic Structure)"
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars/vars.yml
    - vars/aap.yml

  tasks:

    - name: "Pre-flight checks"
      block:
        - name: "Verify main automation_hub template exists"
          ansible.builtin.stat:
            path: "docs/automation_hub/automation_hub.j2"
          register: main_template_check

        - name: "Verify automation_hub child templates exist"
          ansible.builtin.stat:
            path: "{{ item }}"
          register: child_template_check
          loop:
            - docs/automation_hub/platform_governance.j2
            - docs/automation_hub/platform_runbook.j2
            - docs/automation_hub/operator_runbook.j2
            - docs/automation_hub/training_enablement.j2

        - name: "Fail if main template is missing"
          ansible.builtin.fail:
            msg: "Missing main template file: docs/automation_hub/automation_hub.j2"
          when: not main_template_check.stat.exists

        - name: "Fail if child templates are missing"
          ansible.builtin.fail:
            msg: "Missing child template file: {{ item.item }}"
          when: not item.stat.exists
          loop: "{{ child_template_check.results }}"

        - name: "Check pandoc availability"
          ansible.builtin.command: which pandoc
          register: pandoc_available
          changed_when: false
          failed_when: pandoc_available.rc != 0

    - name: Create temporary directory for markdown processing
      ansible.builtin.file:
        path: "~/tmp"
        state: directory
        mode: '0755'

    - name: "Debug - Show template rendering details"
      ansible.builtin.debug:
        msg: |
          About to render Jinja2 templates from automation_hub folder:
          Main page: docs/automation_hub/automation_hub.j2 -> ~/tmp/automation_hub.md
          Child pages: platform_governance, platform_runbook, operator_runbook, training_enablement

    - name: "Render main page templates to markdown using make"
      ansible.builtin.command: make convert-templates-dynamic
      register: template_conversion
      changed_when: true

    - name: "Debug - Show template conversion result"
      ansible.builtin.debug:
        msg: |
          Template conversion result:
          Return code: {{ template_conversion.rc }}
          Output: {{ template_conversion.stdout }}
          Errors: {{ template_conversion.stderr | default('None') }}

    - name: "Convert Markdown to HTML using make"
      block:
        - name: "Debug - Check if markdown files exist first"
          ansible.builtin.stat:
            path: "~/tmp/{{ item }}.md"
          register: md_files_check
          loop:
            - automation_hub
            - platform_governance
            - platform_runbook
            - operator_runbook
            - training_enablement

        - name: "Debug - Show markdown file status"
          ansible.builtin.debug:
            msg: "File ~/tmp/{{ item.item }}.md exists: {{ item.stat.exists }}, size: {{ item.stat.size | default('N/A') }}"
          loop: "{{ md_files_check.results }}"

        - name: "Convert markdown to HTML using make"
          ansible.builtin.command: make convert-markdown
          register: markdown_conversion
          changed_when: true

        - name: "Debug - Show markdown conversion result"
          ansible.builtin.debug:
            msg: |
              Markdown conversion result:
              Return code: {{ markdown_conversion.rc }}
              Output: {{ markdown_conversion.stdout }}
              Errors: {{ markdown_conversion.stderr | default('None') }}

        - name: "Verify HTML files using make"
          ansible.builtin.command: make verify-html
          register: html_verification
          changed_when: false

        - name: "Debug - Show HTML verification result"
          ansible.builtin.debug:
            msg: |
              HTML verification result:
              {{ html_verification.stdout }}

      rescue:
        - name: "Handle conversion errors"
          ansible.builtin.debug:
            msg: "Markdown to HTML conversion failed. Please check the debug output above."

        - name: "Show environment info for troubleshooting"
          ansible.builtin.debug:
            msg: |
              Troubleshooting info:
              - Current user: {{ ansible_env.USER | default('unknown') }}
              - Working directory: {{ ansible_env.PWD | default('unknown') }}
              - Pandoc location: {{ pandoc_check.stdout | default('Not found') }}
              - ~/tmp permissions: {{ ansible_env.USER | default('current user') }} should have write access

        - name: "Fail with helpful message"
          ansible.builtin.fail:
            msg: |
              Markdown to HTML conversion failed. Common issues:
              1. Pandoc not installed or not in PATH
              2. Source markdown files missing or corrupted
              3. Insufficient permissions to write to ~/tmp
              4. Pandoc version compatibility issues

              Manual test: pandoc ~/tmp/main.md -f markdown -t html -o ~/tmp/test.html

    - name: "Publish to Confluence"
      block:

        - name: "Debug - Show Confluence API call details"
          ansible.builtin.debug:
            msg: |
              Confluence API Configuration:
              Base URL: {{ confluence_url }}
              Space: {{ confluence_space }}
              Main page title: Automation Hub
              Main page URL: {{ confluence_url }}/rest/api/content

        - name: "Ensure main page exists"
          ansible.builtin.uri:
            url: "{{ confluence_url }}/rest/api/content"
            method: POST
            headers:
              Authorization: "Basic {{ confluence_auth }}"
              Content-Type: "application/json"
            body_format: json
            body:
              type: page
              title: "Automation Hub"
              space:
                key: "{{ confluence_space }}"
              body:
                storage:
                  value: "{{ lookup('file', lookup('env', 'HOME') + '/tmp/automation_hub.md.html') }}"
                  representation: storage
          register: main_page
          failed_when: false

        - name: "Debug - Show main page creation result"
          ansible.builtin.debug:
            msg: |
              Main page creation result:
              Status: {{ main_page.status }}
              Response: {{ main_page.json | default('No JSON response') | to_nice_json }}
              URL used: {{ confluence_url }}/rest/api/content

        - name: "Get main page ID if exists"
          ansible.builtin.uri:
            url: >-
              {{ confluence_url }}/rest/api/content?title={{ 'Automation Hub' | urlencode }}&spaceKey={{ confluence_space }}&expand=version
            method: GET
            headers:
              Authorization: "Basic {{ confluence_auth }}"
              Content-Type: "application/json"
          register: main_page_query
          when: main_page.status != 200

        - name: "Debug - Show main page query details"
          ansible.builtin.debug:
            msg: |
              Main page query details:
              URL: {{ confluence_url }}/rest/api/content?title={{ 'Automation Hub' | urlencode }}&spaceKey={{ confluence_space }}&expand=version
              Status: {{ main_page_query.status | default('Not executed') }}
              Response: {{ main_page_query.json | default('No response') | to_nice_json }}
          when: main_page.status != 200

        - name: "Debug - Show update details"
          ansible.builtin.debug:
            msg: |
              Main page update details:
              Page ID: {{ main_page_query.json.results[0].id | default('Not found') }}
              Current version: {{ main_page_query.json.results[0].version.number | default('Unknown') }}
              Update URL: {{ confluence_url }}/rest/api/content/{{ main_page_query.json.results[0].id | default('NO_ID') }}
          when:
            - main_page_query is defined
            - main_page_query.status == 200
            - main_page_query.json is defined
            - main_page_query.json.results is defined
            - main_page_query.json.results | length > 0

        - name: "Update main page if exists"
          ansible.builtin.uri:
            url: >-
              {{ confluence_url }}/rest/api/content/{{ main_page_query.json.results[0].id }}
            method: PUT
            headers:
              Authorization: "Basic {{ confluence_auth }}"
              Content-Type: "application/json"
            body_format: json
            body:
              version:
                number: "{{ main_page_query.json.results[0].version.number + 1 }}"
              title: "Automation Hub"
              type: page
              body:
                storage:
                  value: "{{ lookup('file', lookup('env', 'HOME') + '/tmp/automation_hub.md.html') }}"
                  representation: storage
          register: main_page_update
          when:
            - main_page_query is defined
            - main_page_query.status == 200
            - main_page_query.json is defined
            - main_page_query.json.results is defined
            - main_page_query.json.results | length > 0

        - name: "Debug - Show main page update result"
          ansible.builtin.debug:
            msg: |
              Main page update result:
              Status: {{ main_page_update.status | default('Not executed') }}
              Response: {{ main_page_update.json | default('No response') | to_nice_json }}
          when: main_page_update is defined


        - name: "Define dynamic child pages"
          ansible.builtin.set_fact:
            automation_hub_children:
              - title: "Platform Governance"
                file: "platform_governance.md"
              - title: "Platform Runbook"
                file: "platform_runbook.md"
              - title: "Operator Runbook"
                file: "operator_runbook.md"
              - title: "Training Enablement"
                file: "training_enablement.md"

        - name: "Try to create child page"
          ansible.builtin.uri:
            url: "{{ confluence_url }}/rest/api/content"
            method: POST
            headers:
              Authorization: "Basic {{ confluence_auth }}"
              Content-Type: "application/json"
            body_format: json
            body:
              type: page
              title: "{{ item.title }}"
              space:
                key: "{{ confluence_space }}"
              ancestors:
                - id: >-
                    {{ main_page.json.id if main_page.status == 200
                    else main_page_query.json.results[0].id }}
              body:
                storage:
                  value: "{{ lookup('file', lookup('env', 'HOME') + '/tmp/' + item.file + '.html') }}"
                  representation: storage
          register: create_child_page
          failed_when: false
          loop: "{{ automation_hub_children }}"

        - name: "Debug - Show child page creation details"
          ansible.builtin.debug:
            msg: |
              Child page creation details:
              Title: {{ item.title }}
              File: {{ item.file }}
              Parent ID: {{ main_page.json.id if main_page.status == 200 else main_page_query.json.results[0].id }}
              URL: {{ confluence_url }}/rest/api/content
              Status: {{ create_child_page.results[ansible_loop.index0].status | default('Not executed') }}
          loop: "{{ automation_hub_children }}"
          loop_control:
            extended: true
          when: create_child_page is defined

        - name: "Query existing child page"
          ansible.builtin.uri:
            url: >-
              {{ confluence_url }}/rest/api/content?title={{ item.title | urlencode }}&spaceKey={{ confluence_space }}&expand=version
            method: GET
            headers:
              Authorization: "Basic {{ confluence_auth }}"
              Content-Type: "application/json"
          register: child_page_query
          when: create_child_page.results[ansible_loop.index0].status != 200
          loop: "{{ automation_hub_children }}"
          loop_control:
            extended: true

        - name: "Debug - Show child page query details"
          ansible.builtin.debug:
            msg: |
              Child page query details:
              Title: {{ item.title }}
              URL: {{ confluence_url }}/rest/api/content?title={{ item.title | urlencode }}&spaceKey={{ confluence_space }}&expand=version
              Status: {{ child_page_query.results[ansible_loop.index0].status | default('Not executed') }}
              Response: {{ child_page_query.results[ansible_loop.index0].json | default('No response') | to_nice_json }}
          loop: "{{ automation_hub_children }}"
          loop_control:
            extended: true
          when: child_page_query is defined and child_page_query.results is defined

        - name: "Update child page content"
          ansible.builtin.uri:
            url: >-
              {{ confluence_url }}/rest/api/content/{{
                child_page_query.results[ansible_loop.index0].json.results[0].id
              }}
            method: PUT
            headers:
              Authorization: "Basic {{ confluence_auth }}"
              Content-Type: "application/json"
            body_format: json
            body:
              version:
                number: >-
                  {{ child_page_query.results[ansible_loop.index0].json.results[0].version.number + 1 }}
              title: "{{ item.title }}"
              type: page
              ancestors:
                - id: >-
                    {{ main_page.json.id if main_page.status == 200
                    else main_page_query.json.results[0].id }}
              body:
                storage:
                  value: "{{ lookup('file', lookup('env', 'HOME') + '/tmp/' + item.file + '.html') }}"
                  representation: storage
          when:
            - child_page_query is defined
            - child_page_query.results[ansible_loop.index0].status == 200
            - child_page_query.results[ansible_loop.index0].json.results is defined
            - child_page_query.results[ansible_loop.index0].json.results | length > 0
          loop: "{{ automation_hub_children }}"
          loop_control:
            extended: true

        - name: "Debug - Show child page update details"
          ansible.builtin.debug:
            msg: |
              Child page update details:
              Title: {{ item.title }}
              Page ID: {{ child_page_query.results[ansible_loop.index0].json.results[0].id | default('Not found') }}
              Current version: {{ child_page_query.results[ansible_loop.index0].json.results[0].version.number | default('Unknown') }}
              Update URL: {{ confluence_url }}/rest/api/content/{{ child_page_query.results[ansible_loop.index0].json.results[0].id | default('NO_ID') }}
          loop: "{{ automation_hub_children }}"
          loop_control:
            extended: true
          when:
            - child_page_query is defined
            - child_page_query.results is defined
            - child_page_query.results[ansible_loop.index0].status == 200
            - child_page_query.results[ansible_loop.index0].json is defined
            - child_page_query.results[ansible_loop.index0].json.results is defined
            - child_page_query.results[ansible_loop.index0].json.results | length > 0

    - name: "Fallback conversion if make failed"
      block:
        - name: "Fallback: Try make convert-all"
          ansible.builtin.command: make convert-all
          register: fallback_conversion
          when: markdown_conversion.rc != 0
          changed_when: true
          failed_when: false

        - name: "Final verification of HTML files"
          ansible.builtin.command: make verify-html
          register: final_verification
          changed_when: false

        - name: "Report final conversion status"
          ansible.builtin.debug:
            msg: |
              Final verification result:
              {{ final_verification.stdout }}

      rescue:
        - name: "Handle fallback conversion errors"
          ansible.builtin.debug:
            msg: "Fallback conversion to HTML failed. Please check the debug output above."

        - name: "Show environment info for troubleshooting"
          ansible.builtin.debug:
            msg: |
              Troubleshooting info:
              - Current user: {{ ansible_env.USER | default('unknown') }}
              - Working directory: {{ ansible_env.PWD | default('unknown') }}
              - Pandoc location: {{ pandoc_check.stdout | default('Not found') }}
              - ~/tmp permissions: {{ ansible_env.USER | default('current user') }} should have write access

        - name: "Fail with helpful message"
          ansible.builtin.fail:
            msg: |
              Fallback conversion to HTML failed. Common issues:
              1. Pandoc not installed or not in PATH
              2. Source markdown files missing or corrupted
              3. Insufficient permissions to write to ~/tmp
              4. Pandoc version compatibility issues

              Manual test: pandoc ~/tmp/main.md -f markdown -t html -o ~/tmp/test.html
