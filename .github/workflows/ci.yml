---
name: üöÄ CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/*'
      - 'release/*'
      - 'hotfix/*'
  pull_request:
    branches:
      - main
      - develop
      - 'release/*'
      - 'hotfix/*'
  workflow_dispatch:
    inputs:
      full_scan:
        description: 'Run full codebase scan (not just changed files)'
        required: false
        type: boolean
        default: false
      skip_molecule:
        description: 'Skip Molecule testing for faster feedback'
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Define permissions for the entire workflow
permissions:
  contents: read
  packages: read
  pull-requests: write
  statuses: write
  security-events: write

jobs:
  # Security: Mask sensitive values across all jobs
  setup-security:
    name: üîí Security Setup
    runs-on: ubuntu-latest
    steps:
      - name: üé≠ Mask Sensitive Values
        run: |
          # Mask common token patterns that might appear in logs
          echo "::add-mask::${{ secrets.GITHUB_TOKEN }}"
          
          # Mask Confluence-related secrets if they exist
          if [ -n "${{ secrets.CONFLUENCE_URL }}" ]; then
            echo "::add-mask::${{ secrets.CONFLUENCE_URL }}"
          fi
          if [ -n "${{ secrets.CONFLUENCE_SPACE }}" ]; then
            echo "::add-mask::${{ secrets.CONFLUENCE_SPACE }}"
          fi
          if [ -n "${{ secrets.CONFLUENCE_AUTH }}" ]; then
            echo "::add-mask::${{ secrets.CONFLUENCE_AUTH }}"
          fi
          
          # Mask partial token patterns (first/last chars of tokens)
          if [ -n "${{ secrets.CONFLUENCE_AUTH }}" ]; then
            AUTH_PARTIAL=$(echo "${{ secrets.CONFLUENCE_AUTH }}" | sed 's/\(.\{4\}\).*\(.\{4\}\)/\1****\2/')
            echo "::add-mask::$AUTH_PARTIAL"
          fi
          
          # Mask common credential patterns that might leak
          echo "::add-mask::ghp_"
          echo "::add-mask::gho_"
          echo "::add-mask::ghu_"
          echo "::add-mask::ghs_"
          echo "::add-mask::github_pat_"
          echo "::add-mask::ATATT"
          echo "::add-mask::ATCTT"
          echo "::add-mask::ATBT"
          
          # Additional patterns for Confluence and other services
          echo "::add-mask::Basic "
          echo "::add-mask::Bearer "
          echo "::add-mask::Token "
          
          echo "‚úÖ Sensitive values masked successfully"

  # Quick validation for fast feedback
  quick-validation:
    name: ‚ö° Quick Validation
    needs: setup-security
    runs-on: ubuntu-latest
    
    outputs:
      files-yaml: ${{ steps.file-count.outputs.yaml }}
      files-python: ${{ steps.file-count.outputs.python }}
      files-shell: ${{ steps.file-count.outputs.shell }}
      files-markdown: ${{ steps.file-count.outputs.markdown }}
      files-json: ${{ steps.file-count.outputs.json }}
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üìä Count Files by Type
        id: file-count
        run: |
          echo "yaml=$(find . -name '*.yml' -o -name '*.yaml' | grep -v ".git" | wc -l)" >> $GITHUB_OUTPUT
          echo "python=$(find . -name '*.py' | grep -v ".git" | wc -l)" >> $GITHUB_OUTPUT
          echo "shell=$(find . -name '*.sh' | grep -v ".git" | wc -l)" >> $GITHUB_OUTPUT
          echo "markdown=$(find . -name '*.md' | grep -v ".git" | wc -l)" >> $GITHUB_OUTPUT
          echo "json=$(find . -name '*.json' | grep -v ".git" | wc -l)" >> $GITHUB_OUTPUT

      - name: üß™ Basic Syntax Checks
        run: |
          echo "üîç Running quick syntax validation..."
          
          # Check for basic YAML syntax
          echo "Checking YAML files..."
          find . -name "*.yml" -o -name "*.yaml" | head -20 | while read file; do
            if [ "$file" != "./vars/vars.yml" ]; then  # Skip encrypted file
              python3 -c "import yaml; yaml.safe_load(open('$file'))" && echo "‚úÖ $file" || echo "‚ùå $file"
            fi
          done
          
          # Check for basic JSON syntax
          echo "Checking JSON files..."
          find . -name "*.json" | head -10 | while read file; do
            python3 -c "import json; json.load(open('$file'))" && echo "‚úÖ $file" || echo "‚ùå $file"
          done
          
          # Check for executable permissions on shell scripts
          echo "Checking shell script permissions..."
          find . -name "*.sh" -not -executable | while read file; do
            echo "‚ö†Ô∏è $file may need executable permissions"
          done

      - name: üìä Repository Statistics
        run: |
          echo "## üìä Repository Statistics" >> $GITHUB_STEP_SUMMARY
          echo "| File Type | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| YAML files | ${{ steps.file-count.outputs.yaml }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Markdown files | ${{ steps.file-count.outputs.markdown }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python files | ${{ steps.file-count.outputs.python }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Shell scripts | ${{ steps.file-count.outputs.shell }} |" >> $GITHUB_STEP_SUMMARY
          echo "| JSON files | ${{ steps.file-count.outputs.json }} |" >> $GITHUB_STEP_SUMMARY

  # Enhanced linting with Super Linter
  super-linter:
    name: üîç Super Linter
    needs: [setup-security, quick-validation]
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: read
      statuses: write
      security-events: write
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Configure Environment
        id: config
        run: |
          # Dynamic branch detection
          if [ "${{ github.event.repository.default_branch }}" != "" ]; then
            echo "default_branch=${{ github.event.repository.default_branch }}" >> $GITHUB_OUTPUT
          else
            echo "default_branch=main" >> $GITHUB_OUTPUT
          fi

      - name: üîç Run Super Linter
        id: super-linter
        uses: super-linter/super-linter@v5
        env:
          # Core configuration
          DEFAULT_BRANCH: ${{ steps.config.outputs.default_branch }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: ${{ github.event.inputs.full_scan == 'true' || github.event_name == 'workflow_dispatch' }}
          LOG_LEVEL: 'WARN'  # Reduced from INFO to minimize token exposure
          CREATE_LOG_FILE: true
          
          # Universal linters (always enabled)
          VALIDATE_YAML: true
          VALIDATE_JSON: true
          VALIDATE_MARKDOWN: true
          VALIDATE_GITHUB_ACTIONS: true
          VALIDATE_ENV: true
          
          # Conditional linters based on file presence
          VALIDATE_ANSIBLE: true
          VALIDATE_PYTHON_BLACK: ${{ needs.quick-validation.outputs.files-python != '0' }}
          VALIDATE_PYTHON_PYLINT: ${{ needs.quick-validation.outputs.files-python != '0' }}
          VALIDATE_PYTHON_FLAKE8: ${{ needs.quick-validation.outputs.files-python != '0' }}
          VALIDATE_BASH: ${{ needs.quick-validation.outputs.files-shell != '0' }}
          VALIDATE_SHELL_SHFMT: ${{ needs.quick-validation.outputs.files-shell != '0' }}
          VALIDATE_DOCKERFILE_HADOLINT: true
          
          # Configuration files
          YAML_CONFIG_FILE: .yamllint
          ANSIBLE_CONFIG_FILE: .ansible-lint
          MARKDOWN_CONFIG_FILE: .markdownlint.yml
          
          # Performance settings
          SUPPRESS_POSSUM: true
          MULTI_STATUS: true
          IGNORE_GITIGNORED_FILES: true
          
          # Security: Reduce log verbosity to prevent token leakage
          ACTIONS_RUNNER_DEBUG: false
          ACTIONS_STEP_DEBUG: false
          
          # Behavior
          DISABLE_ERRORS: false

      - name: üßπ Sanitize Super Linter Logs
        if: always()
        run: |
          # Check if log file exists and sanitize it
          if [ -f "super-linter.log" ]; then
            echo "üßπ Sanitizing Super Linter logs..."
            
            # Create a backup
            cp super-linter.log super-linter.log.original
            
            # Remove or mask potential sensitive patterns
            sed -i 's/ghp_[a-zA-Z0-9]\{36\}/***GITHUB_TOKEN***/g' super-linter.log
            sed -i 's/gho_[a-zA-Z0-9]\{36\}/***GITHUB_TOKEN***/g' super-linter.log
            sed -i 's/ghu_[a-zA-Z0-9]\{36\}/***GITHUB_TOKEN***/g' super-linter.log
            sed -i 's/ghs_[a-zA-Z0-9]\{36\}/***GITHUB_TOKEN***/g' super-linter.log
            sed -i 's/github_pat_[a-zA-Z0-9_]\{82\}/***GITHUB_PAT***/g' super-linter.log
            sed -i 's/ATATT[a-zA-Z0-9+/=]\{40,\}/***ATLASSIAN_TOKEN***/g' super-linter.log
            sed -i 's/ATCTT[a-zA-Z0-9+/=]\{40,\}/***ATLASSIAN_TOKEN***/g' super-linter.log
            sed -i 's/Basic [a-zA-Z0-9+/=]\{20,\}/Basic ***ENCODED_CREDENTIALS***/g' super-linter.log
            sed -i 's/Bearer [a-zA-Z0-9+/=]\{20,\}/Bearer ***TOKEN***/g' super-linter.log
            
            # Remove any remaining base64 encoded patterns that look like credentials
            sed -i 's/[a-zA-Z0-9+/=]\{40,\}/***POTENTIAL_TOKEN***/g' super-linter.log
            
            echo "‚úÖ Log sanitization completed"
            
            # Show a sample of sanitized content (first 50 lines) for debugging
            echo "üìã Sanitized log sample (first 50 lines):"
            head -50 super-linter.log | grep -v "***" || echo "No sensitive patterns found in sample"
          else
            echo "‚ö†Ô∏è Super Linter log file not found"
          fi

      - name: üì§ Upload Sanitized Super Linter Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: super-linter-logs-sanitized-${{ github.run_id }}
          path: super-linter.log
          retention-days: 30

      - name: üì§ Upload Original Super Linter Logs (Debug Only)
        if: always() && github.event.inputs.full_scan == 'true'  # Only upload original logs for full scans
        uses: actions/upload-artifact@v4
        with:
          name: super-linter-logs-original-${{ github.run_id }}
          path: super-linter.log.original
          retention-days: 7  # Shorter retention for potentially sensitive logs

      - name: üìã Super Linter Summary
        if: always()
        run: |
          echo "## üîç Super Linter Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.super-linter.outcome }}" = "success" ]; then
            echo "**Status:** ‚úÖ All linting checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** ‚ùå Linting issues detected" >> $GITHUB_STEP_SUMMARY
          fi
          echo "**Validation Scope:** ${{ github.event.inputs.full_scan == 'true' && 'Full codebase' || 'Changed files only' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "**Enabled Linters:**" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ YAML (yamllint)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Ansible (ansible-lint)" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ needs.quick-validation.outputs.files-shell != '0' && '‚úÖ' || '‚è∏Ô∏è' }} Shell/Bash (shellcheck, shfmt)" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ needs.quick-validation.outputs.files-python != '0' && '‚úÖ' || '‚è∏Ô∏è' }} Python (black, pylint, flake8)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Markdown (markdownlint)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ JSON (jsonlint)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Dockerfile (hadolint)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ GitHub Actions (actionlint)" >> $GITHUB_STEP_SUMMARY

  # Enhanced security scanning
  security:
    name: üõ°Ô∏è Security Scan
    needs: [setup-security, quick-validation]
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîç Run DevSkim Scanner
        uses: microsoft/DevSkim-Action@v1

      - name: üì§ Upload DevSkim SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: devskim-results.sarif

      - name: üîê Advanced Secret Detection
        run: |
          echo "üîç Running security validation..."
          
          # Check for potential secrets (excluding false positives)
          echo "Checking for potential hardcoded secrets..."
          if grep -r "password\|secret\|ATAT\|api_token" . \
             --include="*.yml" --include="*.yaml" --include="*.py" --include="*.sh" \
             --exclude-dir=.git --exclude-dir=.github \
             | grep -v "example\|template\|grep.*secret\|YOUR_.*_HERE\|test:test\|echo.*api_token\|README"; then
            echo "‚ö†Ô∏è Potential secrets found - please review"
            exit 1
          else
            echo "‚úÖ No obvious secrets detected"
          fi

      - name: üîí File Permissions Check
        run: |
          echo "üîí Checking file permissions..."
          
          # Check for world-writable files
          if find . -name "*.yml" -o -name "*.yaml" -o -name "*.py" -o -name "*.sh" | xargs ls -la | grep "^-.......rw"; then
            echo "‚ùå World-writable files found"
            find . -name "*.yml" -o -name "*.yaml" -o -name "*.py" -o -name "*.sh" | xargs ls -la | grep "^-.......rw"
            exit 1
          else
            echo "‚úÖ File permissions look secure"
          fi

      - name: üõ°Ô∏è Security Summary
        if: always()
        run: |
          echo "## üõ°Ô∏è Security Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **DevSkim scan completed**" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Secret detection completed**" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **File permissions checked**" >> $GITHUB_STEP_SUMMARY

  # Enhanced Ansible validation
  ansible-syntax-check:
    name: üé≠ Ansible Validation
    needs: [setup-security, quick-validation]
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîß Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: üì¶ Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üé≠ Ansible Lint
        run: |
          echo "üîç Running Ansible-specific validation..."
          
          # Run ansible-lint with custom config if it exists
          if [ -f .ansible-lint ]; then
            echo "Using custom .ansible-lint configuration"
            ansible-lint --exclude molecule/ .
          else
            echo "Using default ansible-lint configuration"
            ansible-lint --exclude molecule/ --exclude .github/ .
          fi

      - name: üß™ Ansible Syntax Check
        run: |
          echo "üß™ Running Ansible syntax checks..."
          
          # Check main playbooks
          for playbook in playbook.yml playbooks/*.yml; do
            if [ -f "$playbook" ]; then
              echo "Checking: $playbook"
              ansible-playbook --syntax-check "$playbook" || echo "‚ùå Syntax error in $playbook"
            fi
          done

      - name: üìã Ansible Summary
        run: |
          echo "## üé≠ Ansible Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Ansible lint completed**" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Syntax validation completed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Playbooks checked:**" >> $GITHUB_STEP_SUMMARY
          find . -name "*.yml" -path "./playbooks/*" -o -name "playbook.yml" | while read file; do
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
          done

  molecule:
    name: üß™ Molecule Testing
    needs: [super-linter, security, ansible-syntax-check]
    if: ${{ github.event.inputs.skip_molecule != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: ÔøΩ Debug Molecule Prerequisites
        run: |
          echo "üîç Checking Molecule prerequisites..."
          echo "üìä Job dependency status:"
          echo "- super-linter: ${{ needs.super-linter.result }}"
          echo "- security: ${{ needs.security.result }}"
          echo "- ansible-syntax-check: ${{ needs.ansible-syntax-check.result }}"
          echo "üéØ Skip molecule input: ${{ github.event.inputs.skip_molecule }}"
          echo "üéÆ Event name: ${{ github.event_name }}"
          echo "üåø Branch: ${{ github.ref_name }}"
          
          # Check for molecule configuration
          if [ -d "molecule" ]; then
            echo "‚úÖ Molecule directory found"
            echo "üìÅ Available scenarios:"
            ls -la molecule/
          else
            echo "‚ùå No molecule directory found"
          fi
          
          # Check for Docker availability
          if command -v docker &> /dev/null; then
            echo "‚úÖ Docker is available"
            docker --version
          else
            echo "‚ùå Docker not found"
          fi

      - name: ÔøΩüîß Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          # Verify molecule installation
          echo "üîç Verifying Molecule installation..."
          molecule --version
          molecule drivers

      - name: üîç Pre-flight Molecule Check
        run: |
          echo "üîç Running Molecule pre-flight checks..."
          
          # Check molecule scenarios
          if [ -d "molecule" ]; then
            echo "üìã Available Molecule scenarios:"
            for scenario in molecule/*/; do
              if [ -d "$scenario" ]; then
                scenario_name=$(basename "$scenario")
                echo "- $scenario_name"
                if [ -f "$scenario/molecule.yml" ]; then
                  echo "  ‚úÖ molecule.yml found"
                else
                  echo "  ‚ùå molecule.yml missing"
                fi
              fi
            done
          fi
          
          # Test molecule command
          echo "üß™ Testing molecule list command..."
          molecule list || echo "‚ö†Ô∏è Molecule list failed"

      - name: üß™ Run Molecule tests
        run: |
          echo "üß™ Starting Molecule tests..."
          echo "üìä Environment info:"
          echo "- Working directory: $(pwd)"
          echo "- Python version: $(python --version)"
          echo "- Ansible version: $(ansible --version | head -n1)"
          echo "- Molecule version: $(molecule --version)"
          
          # Run molecule with verbose output for debugging
          molecule test --debug
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          MOLECULE_DEBUG: '1'

      - name: üì§ Upload Molecule logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: molecule-logs-debug-${{ github.run_id }}
          path: |
            ~/.cache/molecule/
            .molecule/
            *.log
          retention-days: 7

      - name: üìã Molecule Summary
        if: always()
        run: |
          echo "## üß™ Molecule Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Test Environment:** Ubuntu Latest" >> $GITHUB_STEP_SUMMARY
          echo "**Python Version:** 3.11" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Debug Info:**" >> $GITHUB_STEP_SUMMARY
          echo "- super-linter result: ${{ needs.super-linter.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- security result: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ansible-syntax-check result: ${{ needs.ansible-syntax-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- skip_molecule input: ${{ github.event.inputs.skip_molecule }}" >> $GITHUB_STEP_SUMMARY

  publish:
    name: üöÄ Publish to Confluence
    needs: [molecule]
    if: >
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/hotfix/')) &&
      needs.molecule.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîß Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üöÄ Publish to Confluence
        run: ansible-playbook playbook.yml
        env:
          CONFLUENCE_URL: ${{ secrets.CONFLUENCE_URL || '' }}
          CONFLUENCE_SPACE: ${{ secrets.CONFLUENCE_SPACE || '' }}
          CONFLUENCE_AUTH: ${{ secrets.CONFLUENCE_AUTH || '' }}
        # Don't echo these env vars in debug mode
        shell: bash

      - name: üìã Publishing Summary
        if: always()
        run: |
          echo "## üöÄ Publishing Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Target:** Confluence" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status == 'success' && '‚úÖ Published' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

  # Comprehensive pipeline summary with enhanced reporting
  summary:
    name: üìã Pipeline Summary & Quality Report
    if: always()
    needs: [setup-security, quick-validation, super-linter, security, ansible-syntax-check, molecule, publish]
    runs-on: ubuntu-latest
    steps:
      - name: ÔøΩ Checkout Code
        uses: actions/checkout@v4

      - name: üìä Generate Comprehensive Report
        run: |
          echo "# üöÄ CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall pipeline status
          if [[ "${{ needs.super-linter.result }}" == "success" && \
                "${{ needs.security.result }}" == "success" && \
                "${{ needs.ansible-syntax-check.result }}" == "success" && \
                ("${{ needs.molecule.result }}" == "success" || "${{ needs.molecule.result }}" == "skipped") ]]; then
            echo "üéâ **Pipeline Status: SUCCESS** üéâ" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All quality gates passed! Your code is ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Pipeline Status: NEEDS ATTENTION** ‚ö†Ô∏è" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Some checks failed. Please review and address the issues below." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Repository Overview" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Repository | ${{ github.repository }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Trigger | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| YAML Files | ${{ needs.quick-validation.outputs.files-yaml }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Files | ${{ needs.quick-validation.outputs.files-python }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Shell Scripts | ${{ needs.quick-validation.outputs.files-shell }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Markdown Files | ${{ needs.quick-validation.outputs.files-markdown }} |" >> $GITHUB_STEP_SUMMARY
          echo "| JSON Files | ${{ needs.quick-validation.outputs.files-json }} |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üéØ Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| ‚ö° Quick Validation | ${{ needs.quick-validation.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | Basic syntax and file checks |" >> $GITHUB_STEP_SUMMARY
          echo "| üîç Super Linter | ${{ needs.super-linter.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | Code quality and standards |" >> $GITHUB_STEP_SUMMARY
          echo "| üõ°Ô∏è Security Scan | ${{ needs.security.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | Security vulnerabilities |" >> $GITHUB_STEP_SUMMARY
          echo "| üé≠ Ansible Validation | ${{ needs.ansible-syntax-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | Ansible syntax and lint |" >> $GITHUB_STEP_SUMMARY
          echo "| üß™ Molecule Tests | ${{ needs.molecule.result == 'success' && '‚úÖ Passed' || (needs.molecule.result == 'skipped' && '‚è∏Ô∏è Skipped' || '‚ùå Failed') }} | Infrastructure testing |" >> $GITHUB_STEP_SUMMARY
          echo "| üöÄ Publishing | ${{ needs.publish.result == 'success' && '‚úÖ Published' || (needs.publish.result == 'skipped' && '‚è∏Ô∏è Skipped' || '‚ùå Failed') }} | Confluence deployment |" >> $GITHUB_STEP_SUMMARY
          
          # Quality score calculation
          passed=0
          total=0
          
          # Count successful stages
          if [ "${{ needs.quick-validation.result }}" = "success" ]; then passed=$((passed + 1)); fi; total=$((total + 1))
          if [ "${{ needs.super-linter.result }}" = "success" ]; then passed=$((passed + 1)); fi; total=$((total + 1))
          if [ "${{ needs.security.result }}" = "success" ]; then passed=$((passed + 1)); fi; total=$((total + 1))
          if [ "${{ needs.ansible-syntax-check.result }}" = "success" ]; then passed=$((passed + 1)); fi; total=$((total + 1))
          if [ "${{ needs.molecule.result }}" = "success" ] || [ "${{ needs.molecule.result }}" = "skipped" ]; then passed=$((passed + 1)); fi; total=$((total + 1))
          
          quality_score=$((passed * 100 / total))
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìà Quality Score: ${quality_score}%" >> $GITHUB_STEP_SUMMARY
          
          if [ $quality_score -eq 100 ]; then
            echo "üèÜ **EXCELLENT** - All quality gates passed!" >> $GITHUB_STEP_SUMMARY
          elif [ $quality_score -ge 80 ]; then
            echo "‚úÖ **GOOD** - Most quality gates passed, minor issues to address" >> $GITHUB_STEP_SUMMARY
          elif [ $quality_score -ge 60 ]; then
            echo "‚ö†Ô∏è **FAIR** - Several issues need attention" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **POOR** - Major issues require immediate attention" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Generated by CI/CD Pipeline on $(date)*" >> $GITHUB_STEP_SUMMARY

      - name: üö® Fail Pipeline if Critical Issues
        if: >
          needs.quick-validation.result != 'success' || 
          needs.super-linter.result != 'success' || 
          needs.security.result != 'success' || 
          needs.ansible-syntax-check.result != 'success' ||
          (needs.molecule.result != 'success' && needs.molecule.result != 'skipped')
        run: |
          echo "‚ùå Pipeline failed due to critical quality issues"
          exit 1
