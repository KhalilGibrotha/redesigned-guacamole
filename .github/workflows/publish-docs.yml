---
name: 📚 Publish Documentation to Confluence

on:
  workflow_call:
    inputs:
      target_environment:
        description: 'Target environment for publishing'
        required: false
        type: string
        default: 'production'
      dry_run:
        description: 'Perform a dry run without actual publishing'
        required: false
        type: boolean
        default: false
      full_scan:
        description: 'Force publishing regardless of file changes'
        required: false
        type: boolean
        default: false
    secrets:
      CONFLUENCE_URL:
        required: false
      CONFLUENCE_USER:
        required: false
      CONFLUENCE_API_TOKEN:
        required: false

  # Add manual trigger for testing
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Target environment for publishing'
        required: false
        type: choice
        options:
          - production
          - staging
          - development
        default: 'production'
      dry_run:
        description: 'Perform a dry run without actual publishing'
        required: false
        type: boolean
        default: true

jobs:
  publish-confluence:
    name: 🚀 Publish to Confluence
    runs-on: ubuntu-latest

    permissions:
      contents: read
      actions: read

    steps:
      - name: � Detect Repository Context
        id: context
        run: |
          echo "Current repository: ${{ github.repository }}"
          echo "Original repository: ${{ github.repository }}"

          # For workflow_call, determine if we need to check out both repos
          if [[ "${{ github.event_name }}" == "workflow_call" ]]; then
            # When called externally, we always need to checkout the target (this) repo for scripts
            echo "same-repo=false" >> $GITHUB_OUTPUT
            echo "🔄 External workflow call - need separate checkouts"
          else
            echo "same-repo=true" >> $GITHUB_OUTPUT
            echo "🏠 Running within same repository - optimized checkout"
          fi

      - name: �📥 Checkout Code (Scripts Repository)
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          fetch-depth: 0
          path: redesigned-guacamole

      - name: 📥 Checkout Calling Repository (Content)
        if: steps.context.outputs.same-repo != 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: calling-repo

      - name: 🔗 Create Content Symlink (Same Repository)
        if: steps.context.outputs.same-repo == 'true'
        run: |
          # When running in the same repo, create a symlink to avoid duplication
          ln -s redesigned-guacamole calling-repo
          echo "✅ Created symlink: calling-repo -> redesigned-guacamole"

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f redesigned-guacamole/requirements.txt ]; then
            pip install -r redesigned-guacamole/requirements.txt
          else
            # Install required packages for Confluence publishing
            pip install jinja2 pyyaml requests markdown beautifulsoup4
          fi

      - name: 🔍 Validate Configuration
        run: |
          echo "🔍 Validating Confluence configuration..."

          # Check if we're in dry-run mode
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "🧪 Running in DRY RUN mode - secrets validation relaxed"

            # Check if secrets are available (but don't fail if missing)
            if [[ -n "${{ secrets.CONFLUENCE_URL }}" ]]; then
              echo "✅ CONFLUENCE_URL is configured"
            else
              echo "⚠️ CONFLUENCE_URL is not configured (OK for dry run)"
            fi

            if [[ -n "${{ secrets.CONFLUENCE_USER }}" ]]; then
              echo "✅ CONFLUENCE_USER is configured"
            else
              echo "⚠️ CONFLUENCE_USER is not configured (OK for dry run)"
            fi

            if [[ -n "${{ secrets.CONFLUENCE_API_TOKEN }}" ]]; then
              echo "✅ CONFLUENCE_API_TOKEN is configured"
            else
              echo "⚠️ CONFLUENCE_API_TOKEN is not configured (OK for dry run)"
            fi

            echo "🧪 Dry run mode: proceeding with available configuration"
          else
            echo "🚀 Running in LIVE mode - all secrets required"

            # Check if required secrets are provided for live run
            if [[ -z "${{ secrets.CONFLUENCE_URL }}" ]]; then
              echo "❌ CONFLUENCE_URL secret is required for live publishing"
              exit 1
            fi

            if [[ -z "${{ secrets.CONFLUENCE_USER }}" ]]; then
              echo "❌ CONFLUENCE_USER secret is required for live publishing"
              exit 1
            fi

            if [[ -z "${{ secrets.CONFLUENCE_API_TOKEN }}" ]]; then
              echo "❌ CONFLUENCE_API_TOKEN secret is required for live publishing"
              exit 1
            fi

            echo "✅ All required secrets are configured for live publishing"
          fi

      - name: 🔧 Prepare Publishing Environment
        run: |
          echo "🔧 Preparing publishing environment..."

          # Create output directory
          mkdir -p output/confluence

          # Set environment variables (with defaults for missing secrets)
          echo "CONFLUENCE_URL=${{ secrets.CONFLUENCE_URL || 'https://your-confluence.atlassian.net' }}" >> $GITHUB_ENV
          echo "CONFLUENCE_USER=${{ secrets.CONFLUENCE_USER || 'not-configured' }}" >> $GITHUB_ENV
          echo "CONFLUENCE_TOKEN=${{ secrets.CONFLUENCE_API_TOKEN || 'not-configured' }}" >> $GITHUB_ENV
          echo "DRY_RUN=${{ inputs.dry_run }}" >> $GITHUB_ENV
          echo "TARGET_ENV=${{ inputs.target_environment }}" >> $GITHUB_ENV

          echo "✅ Environment prepared for ${{ inputs.dry_run == true && 'DRY RUN' || 'LIVE' }} mode"

      - name: 📝 Process AAP Documentation
        env:
          CONFLUENCE_URL: ${{ secrets.CONFLUENCE_URL }}
          CONFLUENCE_USER: ${{ secrets.CONFLUENCE_USER }}
          CONFLUENCE_API_TOKEN: ${{ secrets.CONFLUENCE_API_TOKEN }}
        run: |
          echo "📝 Processing AAP documentation templates..."

          # Ensure docs directory exists in calling repo
          mkdir -p calling-repo/docs

          # Copy macros from scripts repository to content repository (only if different repos)
          if [[ "${{ steps.context.outputs.same-repo }}" != "true" ]]; then
            if [ -d "redesigned-guacamole/docs/macros" ]; then
              echo "📋 Copying macros from redesigned-guacamole to calling repository..."
              cp -r redesigned-guacamole/docs/macros calling-repo/docs/
            fi

            # Also copy the main macros.j2 file if it exists
            if [ -f "redesigned-guacamole/docs/macros.j2" ]; then
              echo "📋 Copying macros.j2 from redesigned-guacamole to calling repository..."
              cp redesigned-guacamole/docs/macros.j2 calling-repo/docs/
            fi
          else
            echo "🏠 Same repository - macros already available, no copying needed"
          fi

          # Make the script executable
          chmod +x redesigned-guacamole/scripts/confluence_publisher.py

          # Run the Python-based Confluence publisher
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "🧪 Running in DRY RUN mode"
            python3 redesigned-guacamole/scripts/confluence_publisher.py \
              --dry-run \
              --docs-dir calling-repo/docs \
              --vars-file calling-repo/docs/vars.yaml
          else
            echo "🚀 Running in LIVE mode"
            python3 redesigned-guacamole/scripts/confluence_publisher.py \
              --docs-dir calling-repo/docs \
              --vars-file calling-repo/docs/vars.yaml \
              --confluence-url "${CONFLUENCE_URL:-https://your-confluence.atlassian.net}" \
              --confluence-user "${CONFLUENCE_USER:-not-configured}" \
              --confluence-token "${CONFLUENCE_API_TOKEN:-not-configured}"
          fi

      - name: 📊 Generate Publishing Report
        if: always()
        run: |
          echo "📊 Generating publishing report..."

          # Create a summary report
          cat > output/confluence/publishing_report.md << EOF
          # 📚 Confluence Publishing Report

          ## 📋 Publishing Details
          - **Target Environment**: ${{ inputs.target_environment }}
          - **Dry Run**: ${{ inputs.dry_run }}
          - **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Git Reference**: ${{ github.ref_name }}
          - **Commit SHA**: ${{ github.sha }}
          - **Workflow Run**: ${{ github.run_number }}

          ## 🔗 Links
          - **Repository**: ${{ github.server_url }}/${{ github.repository }}
          - **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          ## 📈 Status
          ${{ inputs.dry_run == true && '🧪 **DRY RUN** - No actual changes were made' || '✅ **LIVE RUN** - Documentation was published to Confluence' }}
          EOF

          echo "✅ Publishing report generated"
          cat output/confluence/publishing_report.md

      - name: 📤 Upload Publishing Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: confluence-publishing-report-${{ github.run_id }}
          path: |
            output/confluence/
          retention-days: 30
          if-no-files-found: warn

      - name: 🔔 Publishing Summary
        if: always()
        run: |
          echo "## 📚 Confluence Publishing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Environment**: ${{ inputs.target_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Git Reference**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "### 🧪 Dry Run Results" >> $GITHUB_STEP_SUMMARY
            echo "- No actual changes were made to Confluence" >> $GITHUB_STEP_SUMMARY
            echo "- Documentation processing completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "- Ready for live publishing when needed" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✅ Publishing Results" >> $GITHUB_STEP_SUMMARY
            echo "- Documentation has been published to Confluence" >> $GITHUB_STEP_SUMMARY
            echo "- Check Confluence space for updated content" >> $GITHUB_STEP_SUMMARY
          fi
