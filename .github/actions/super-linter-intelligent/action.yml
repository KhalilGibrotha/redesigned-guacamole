name: 'Super Linter with Intelligent Detection'
description: 'Runs Super Linter with intelligent file detection and dynamic configuration'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
  full-scan:
    description: 'Run full codebase scan (not just changed files)'
    required: false
    default: 'false'
  default-branch:
    description: 'Default branch for comparison'
    required: false
    default: 'main'

outputs:
  yaml-files:
    description: 'Number of YAML files detected'
    value: ${{ steps.detect-files.outputs.yaml_files }}
  ansible-files:
    description: 'Number of Ansible files detected'
    value: ${{ steps.detect-files.outputs.ansible_files }}
  violations-found:
    description: 'Whether violations were found'
    value: ${{ steps.rule-analysis.outputs.violations_found }}
  total-violations:
    description: 'Total number of violations found'
    value: ${{ steps.rule-analysis.outputs.total_violations }}

runs:
  using: 'composite'
  steps:
    - name: üîç Verify Linter Configuration Files
      shell: bash
      run: |
        echo "üîç Checking for linter configuration files..."

        # Check for .ansible-lint
        if [ -f ".ansible-lint" ]; then
          echo "‚úÖ .ansible-lint found ($(wc -l < .ansible-lint) lines)"
          echo "üìÑ .ansible-lint preview:"
          head -5 .ansible-lint
        else
          echo "‚ùå .ansible-lint not found"
        fi

        # Check for .yamllint
        if [ -f ".yamllint" ]; then
          echo "‚úÖ .yamllint found ($(wc -l < .yamllint) lines)"
        else
          echo "‚ùå .yamllint not found"
        fi

        # Check for markdownlint config (prefer .json)
        if [ -f ".markdownlint.json" ]; then
          echo "‚úÖ .markdownlint.json found ($(wc -l < .markdownlint.json) lines)"
        elif [ -f ".markdownlint.yml" ]; then
          echo "‚úÖ .markdownlint.yml found ($(wc -l < .markdownlint.yml) lines)"
        else
          echo "‚ùå No markdownlint config found"
        fi

        # Check for any conflicting config files
        if [ -f ".markdownlint.json" ] && [ -f ".markdownlint.yml" ]; then
          echo "‚ö†Ô∏è  Both .markdownlint.json and .markdownlint.yml found - Super Linter will prefer .json"
        fi

        echo "üéØ Super Linter will auto-detect all configuration files at repo root"

    - name: üîç Detect Files for Validation
      id: detect-files
      shell: bash
      run: |
        echo "üîç Detecting file types for intelligent validation..."
        
        # Check for different file types and set outputs (with proper quoting)
        yaml_files=$(find . -type f \( -name "*.yml" -o -name "*.yaml" \) ! -path "./.git/*" | wc -l)
        ansible_files=$(find . -type f -name "*.yml" \( -path "./playbooks/*" -o -path "./roles/*" \) -o -name "site.yml" -o -name "playbook*.yml" | wc -l)
        python_files=$(find . -type f -name "*.py" ! -path "./.git/*" ! -path "./.venv/*" ! -path "./venv/*" | wc -l)
        markdown_files=$(find . -type f -name "*.md" ! -path "./.git/*" | wc -l)
        shell_files=$(find . -type f -name "*.sh" ! -path "./.git/*" | wc -l)
        json_files=$(find . -type f -name "*.json" ! -path "./.git/*" ! -path "./node_modules/*" | wc -l)
        github_actions_files=$(find .github/workflows -type f \( -name "*.yml" -o -name "*.yaml" \) 2>/dev/null | wc -l)
        
        # Set outputs
        echo "yaml_files=$yaml_files" >> $GITHUB_OUTPUT
        echo "ansible_files=$ansible_files" >> $GITHUB_OUTPUT
        echo "python_files=$python_files" >> $GITHUB_OUTPUT
        echo "markdown_files=$markdown_files" >> $GITHUB_OUTPUT
        echo "shell_files=$shell_files" >> $GITHUB_OUTPUT
        echo "json_files=$json_files" >> $GITHUB_OUTPUT
        echo "github_actions_files=$github_actions_files" >> $GITHUB_OUTPUT
        
        # Output summary
        echo "üìä File detection summary:"
        echo "  - YAML files: $yaml_files"
        echo "  - Ansible files: $ansible_files"
        echo "  - Python files: $python_files"
        echo "  - Markdown files: $markdown_files"
        echo "  - Shell files: $shell_files"
        echo "  - JSON files: $json_files"
        echo "  - GitHub Actions files: $github_actions_files"

    - name: ‚öôÔ∏è Generate Dynamic Super Linter Configuration
      id: generate-config
      shell: bash
      run: |
        echo "‚öôÔ∏è Generating dynamic Super Linter configuration..."
        
        # Set boolean values based on file detection
        yaml_validation=$([ "${{ steps.detect-files.outputs.yaml_files }}" -gt 0 ] && echo "true" || echo "false")
        ansible_validation=$([ "${{ steps.detect-files.outputs.ansible_files }}" -gt 0 ] && echo "true" || echo "false")
        markdown_validation=$([ "${{ steps.detect-files.outputs.markdown_files }}" -gt 0 ] && echo "true" || echo "false")
        python_validation=$([ "${{ steps.detect-files.outputs.python_files }}" -gt 0 ] && echo "true" || echo "false")
        shell_validation=$([ "${{ steps.detect-files.outputs.shell_files }}" -gt 0 ] && echo "true" || echo "false")
        json_validation=$([ "${{ steps.detect-files.outputs.json_files }}" -gt 0 ] && echo "true" || echo "false")
        github_actions_validation=$([ "${{ steps.detect-files.outputs.github_actions_files }}" -gt 0 ] && echo "true" || echo "false")
        
        # Set validate all codebase based on input
        if [[ "${{ inputs.full-scan }}" == "true" ]]; then
          validate_all_codebase="true"
        else
          validate_all_codebase="false"
        fi
        
        # Create the dynamic configuration file
        cat > .github/super-linter-dynamic.env << ENVEOF
        # Super Linter Dynamic Configuration
        # Generated by composite action based on runtime conditions
        
        DEFAULT_BRANCH=${{ inputs.default-branch }}
        VALIDATE_ALL_CODEBASE=${validate_all_codebase}
        
        # Intelligent validation toggles
        VALIDATE_YAML=${yaml_validation}
        VALIDATE_ANSIBLE=${ansible_validation}
        VALIDATE_MARKDOWN=${markdown_validation}
        VALIDATE_PYTHON=${python_validation}
        VALIDATE_BASH=${shell_validation}
        VALIDATE_JSON=${json_validation}
        VALIDATE_SHELL_SHFMT=${shell_validation}
        VALIDATE_GITHUB_ACTIONS=${github_actions_validation}
        
        # Auto-fix configuration
        FIX_YAML=${yaml_validation}
        FIX_MARKDOWN=${markdown_validation}
        FIX_JSON=${json_validation}
        FIX_SHELL_SHFMT=${shell_validation}
        
        # Performance settings
        PARALLEL=true
        SLIM_IMAGE=true
        FAIL_FAST=false
        
        # Output configuration
        OUTPUT_FORMAT=tap
        OUTPUT_DETAILS=detailed
        CREATE_LOG_FILE=true
        
        # File filtering
        USE_FIND_ALGORITHM=false
        IGNORE_GITIGNORED_FILES=true
        
        # Suppression
        SUPPRESS_POSSUM=true
        SUPPRESS_FILE_TYPE_WARN=true
        ENVEOF
        
        echo "‚úÖ Dynamic configuration generated with intelligent validation"
        echo "üìã Configuration preview:"
        head -10 .github/super-linter-dynamic.env

    - name: üîç Run Super Linter
      id: super-linter
      uses: super-linter/super-linter@v5
      with:
        env-file: .github/super-linter-dynamic.env
        github-token: ${{ inputs.github-token }}

    - name: üì§ Upload Dynamic Configuration (Debug)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: super-linter-config-${{ github.run_id }}
        path: .github/super-linter-dynamic.env
        retention-days: 7
        if-no-files-found: warn
