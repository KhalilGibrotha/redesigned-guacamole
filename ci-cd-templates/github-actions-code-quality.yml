---
# Main Code Quality Workflow for Confluence Automation Repository
# This workflow uses the reusable Super Linter workflow for consistent code quality

name: 🔍 Code Quality

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  # Use the reusable Super Linter workflow
  code-quality:
    name: 🔍 Comprehensive Code Quality
    uses: ./.github/workflows/reusable-super-linter.yml
    with:
      validate-all-codebase: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      log-level: 'INFO'
      enable-security-scan: true
      enable-python-linting: true
      enable-shell-linting: true
    secrets: inherit

  # Project-specific validations
  ansible-specific:
    name: 🎭 Ansible-Specific Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install Ansible tools
        run: |
          python -m pip install --upgrade pip
          pip install ansible ansible-lint

      - name: 🧪 Test Ansible playbook syntax
        run: |
          # Test main playbook
          ansible-playbook --syntax-check playbook.yml
          
          # Test modular playbooks
          for playbook in playbooks/*.yml; do
            if [ -f "$playbook" ] && [ "$playbook" != "playbooks/main.yml" ]; then
              echo "Testing syntax: $playbook"
              ansible-playbook --syntax-check "$playbook" || echo "Warning: $playbook has syntax issues"
            fi
          done

      - name: 🔍 Validate Jinja2 templates
        run: |
          python3 << 'EOF'
          import os
          import sys
          from jinja2 import Environment, FileSystemLoader, TemplateError
          
          template_dir = 'docs'
          if not os.path.exists(template_dir):
              print(f"Template directory {template_dir} not found")
              sys.exit(0)
          
          env = Environment(loader=FileSystemLoader(template_dir))
          errors = 0
          
          for root, dirs, files in os.walk(template_dir):
              for file in files:
                  if file.endswith('.j2'):
                      template_path = os.path.join(root, file)
                      relative_path = os.path.relpath(template_path, template_dir)
                      try:
                          template = env.get_template(relative_path)
                          print(f"✅ {template_path} - syntax valid")
                      except TemplateError as e:
                          print(f"❌ {template_path} - syntax error: {e}")
                          errors += 1
          
          if errors > 0:
              print(f"\n❌ Found {errors} template syntax errors")
              sys.exit(1)
          else:
              print(f"\n🎉 All {len([f for f in os.listdir(template_dir) if f.endswith('.j2')])} templates validated successfully!")
          EOF

      - name: 🔧 Test Makefile targets
        run: |
          # Test make help
          make help
          
          # Test dependency checking
          make check-deps || echo "Some dependencies missing (expected in CI)"
          
          # Test OS detection
          make check-os

  # Integration test - ensure workflows can work together
  integration-test:
    name: 🔗 Integration Test
    runs-on: ubuntu-latest
    needs: [code-quality, ansible-specific]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🧪 Test Confluence workflow (dry run)
        run: |
          # Create mock variables for testing
          mkdir -p test-vars
          cat > test-vars/mock-vars.yml << 'EOF'
          project_name: "CI Test Project"
          env: "CI"
          database_url: "https://test.example.com"
          confluence_url: "https://test.atlassian.net/wiki"
          confluence_space: "TEST"
          confluence_auth: "dGVzdDp0ZXN0"
          monitoring_tool: "GitHub Actions"
          child_pages:
            - title: "Test Page 1"
              file: "test1.md"
            - title: "Test Page 2"
              file: "test2.md"
          EOF
          
          echo "✅ Mock configuration created for integration testing"

      - name: 📋 Integration test summary
        run: |
          echo "## 🔗 Integration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "**Code Quality:** ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Ansible Validation:** ${{ needs.ansible-specific.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Integration:** ✅ Configuration validation passed" >> $GITHUB_STEP_SUMMARY

  # Summary job
  quality-gate:
    name: 🚪 Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality, ansible-specific, integration-test]
    if: always()
    
    steps:
      - name: 🚪 Quality Gate Check
        run: |
          echo "## 🚪 Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check all job results
          code_quality="${{ needs.code-quality.result }}"
          ansible_specific="${{ needs.ansible-specific.result }}"
          integration="${{ needs.integration-test.result }}"
          
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality (Super Linter) | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Ansible Validation | ${{ needs.ansible-specific.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Test | ${{ needs.integration-test.result == 'success' && '✅ Passed' || (needs.integration-test.result == 'skipped' && '⏸️ Skipped' || '❌ Failed') }} |" >> $GITHUB_STEP_SUMMARY
          
          # Overall result
          if [ "$code_quality" = "success" ] && [ "$ansible_specific" = "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **Quality Gate: PASSED** - All checks successful!" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Quality Gate: FAILED** - Some checks failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
