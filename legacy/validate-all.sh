#!/bin/bash

# =============================================================================
# Comprehensive Validation Script for Ansible Documentation Project
# =============================================================================
# This script runs all validation checks before merging branches
# Author: Generated by GitHub Copilot
# Date: $(date)
# =============================================================================

set -e  # Exit on any error
trap 'echo "‚ùå Validation failed at line $LINENO"' ERR

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_section() {
    echo -e "\n${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${BLUE}üìã $1${NC}"
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
}

# Initialize counters
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0
WARNING_CHECKS=0

# Function to run a check
run_check() {
    local check_name="$1"
    local check_command="$2"
    local is_optional="${3:-false}"
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    log_info "Running: $check_name"
    
    if eval "$check_command" >/dev/null 2>&1; then
        log_success "$check_name"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
        return 0
    else
        if [ "$is_optional" = "true" ]; then
            log_warning "$check_name (optional - continuing)"
            WARNING_CHECKS=$((WARNING_CHECKS + 1))
            return 0
        else
            log_error "$check_name"
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
            return 1
        fi
    fi
}

# Function to show summary
show_summary() {
    log_section "VALIDATION SUMMARY"
    echo "Total Checks: $TOTAL_CHECKS"
    echo "‚úÖ Passed: $PASSED_CHECKS"
    echo "‚ö†Ô∏è  Warnings: $WARNING_CHECKS"
    echo "‚ùå Failed: $FAILED_CHECKS"
    
    if [ $FAILED_CHECKS -eq 0 ]; then
        log_success "All critical validations passed! ‚ú®"
        return 0
    else
        log_error "Some validations failed!"
        return 1
    fi
}

# Main validation workflow
main() {
    log_section "COMPREHENSIVE VALIDATION STARTING"
    
    # 1. System and Dependencies Check
    log_section "1. SYSTEM & DEPENDENCIES"
    run_check "Check OS compatibility" "make check-os"
    run_check "Check dependencies" "make check-deps"
    
    # 2. Security Checks
    log_section "2. SECURITY VALIDATION"
    run_check "Security checks" "make security-check"
    
    # 3. File and Structure Validation
    log_section "3. FILE & STRUCTURE VALIDATION"
    run_check "Clean temporary files" "make clean"
    run_check "Sanity checks" "make sanity-check"
    run_check "Template validation" "make validate-templates"
    
    # 4. Code Quality Checks
    log_section "4. CODE QUALITY & LINTING"
    run_check "YAML linting" "make lint-yaml"
    run_check "Ansible linting" "make lint-ansible" "true"  # Optional if ansible-lint not available
    
    # 5. Syntax and Functionality Tests
    log_section "5. SYNTAX & FUNCTIONALITY"
    run_check "Ansible syntax check" "make test"
    run_check "Comprehensive syntax validation" "make test-syntax" "true"  # May fail if ansible-lint missing
    
    # 6. Template Rendering Test
    log_section "6. TEMPLATE RENDERING"
    run_check "Template rendering test" "make test-render" "true"  # Optional
    
    # 7. Git Status Check
    log_section "7. GIT STATUS"
    run_check "Git status clean" "git status --porcelain | wc -l | grep -q '^0$'" "true"
    
    # Show final summary
    show_summary
}

# Script options
case "${1:-}" in
    --help|-h)
        echo "Usage: $0 [options]"
        echo ""
        echo "Options:"
        echo "  --help, -h     Show this help message"
        echo "  --quiet, -q    Suppress verbose output"
        echo "  --dry-run      Show what would be checked without running"
        echo ""
        echo "This script runs comprehensive validation checks including:"
        echo "  ‚Ä¢ System compatibility"
        echo "  ‚Ä¢ Security validation"
        echo "  ‚Ä¢ File structure validation"
        echo "  ‚Ä¢ Code quality (YAML/Ansible linting)"
        echo "  ‚Ä¢ Syntax validation"
        echo "  ‚Ä¢ Template rendering tests"
        echo "  ‚Ä¢ Git status checks"
        exit 0
        ;;
    --dry-run)
        echo "Dry run - would execute the following checks:"
        echo "1. System & Dependencies (check-os, check-deps)"
        echo "2. Security Validation (security-check)"
        echo "3. File & Structure (clean, sanity-check, validate-templates)"
        echo "4. Code Quality (lint-yaml, lint-ansible)"
        echo "5. Syntax & Functionality (test, test-syntax)"
        echo "6. Template Rendering (test-render)"
        echo "7. Git Status (git status check)"
        exit 0
        ;;
    --quiet|-q)
        exec 1>/dev/null
        ;;
esac

# Check if we're in the right directory
if [ ! -f "Makefile" ] || [ ! -f "playbook.yml" ]; then
    log_error "This script must be run from the project root directory"
    log_info "Please cd to the directory containing Makefile and playbook.yml"
    exit 1
fi

# Run main validation
main

# Exit with appropriate code
if [ $FAILED_CHECKS -eq 0 ]; then
    log_success "üéâ All validations completed successfully!"
    log_info "Your branch is ready for merge!"
    exit 0
else
    log_error "‚ùå Some validations failed. Please fix the issues before merging."
    exit 1
fi
