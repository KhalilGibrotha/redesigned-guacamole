---
# AAP Documentation Publishing Playbook for Confluence
# Processes Jinja2 templates and publishes to Confluence

- name: "📚 Process and Publish AAP Documentation"
  hosts: localhost
  connection: local
  gather_facts: true
  vars:
    # Load variables from the docs/vars.yaml file
    docs_vars: "{{ lookup('file', 'docs/vars.yaml') | from_yaml }}"
    
    # Confluence configuration (passed from workflow)
    confluence_config: "{{ confluence | default({}) }}"
    
    # Publishing configuration
    dry_run: "{{ dry_run | default(false) }}"
    output_dir: "output/confluence"
    
    # AAP Template files to process
    aap_templates:
      - name: "aap_policy_governance"
        source: "docs/aap_policy_governance.j2"
        title: "Ansible Automation Platform (AAP) Policy & Governance"
      - name: "aap_operations_manual"
        source: "docs/aap_operations_manual.j2"
        title: "Ansible Automation Platform (AAP) Operations Manual"
      - name: "aap_platform_admin_guide"
        source: "docs/aap_platform_admin_guide.j2"
        title: "Ansible Automation Platform (AAP) Admin Guide"

  tasks:
    - name: "🔍 Validate required files exist"
      ansible.builtin.stat:
        path: "{{ item }}"
      register: file_check
      failed_when: not file_check.stat.exists
      loop:
        - "docs/vars.yaml"
        - "docs/macros/macros.j2"
        - "docs/aap_policy_governance.j2"
        - "docs/aap_operations_manual.j2"
        - "docs/aap_platform_admin_guide.j2"

    - name: "📁 Create output directories"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ output_dir }}"
        - "{{ output_dir }}/rendered"
        - "{{ output_dir }}/metadata"

    - name: "📝 Display loaded variables (debug)"
      ansible.builtin.debug:
        msg: |
          🔧 Configuration Overview:
          - Organization: {{ docs_vars.ORGANIZATION_NAME | default('Not Set') }}
          - AAP Version: {{ docs_vars.AAP_VERSION | default('Not Set') }}
          - Environment: {{ docs_vars.ENVIRONMENT_TYPE | default('Not Set') }}
          - Dry Run: {{ dry_run }}
          - Output Directory: {{ output_dir }}

    - name: "🎨 Render AAP documentation templates"
      ansible.builtin.template:
        src: "{{ item.source }}"
        dest: "{{ output_dir }}/rendered/{{ item.name }}.md"
        mode: '0644'
      vars:
        # Make all docs_vars available to templates
        ORGANIZATION_NAME: "{{ docs_vars.ORGANIZATION_NAME }}"
        SUB_ORGANIZATION_NAME: "{{ docs_vars.SUB_ORGANIZATION_NAME }}"
        SUB_ORG_OBJECTIVE_TITLE: "{{ docs_vars.SUB_ORG_OBJECTIVE_TITLE }}"
        MAIN_OBJECTIVES: "{{ docs_vars.MAIN_OBJECTIVES }}"
        ENVIRONMENT_TYPE: "{{ docs_vars.ENVIRONMENT_TYPE }}"
        AAP_VERSION: "{{ docs_vars.AAP_VERSION }}"
        SATELLITE_VERSION: "{{ docs_vars.SATELLITE_VERSION }}"
        RHEL_VERSIONS: "{{ docs_vars.RHEL_VERSIONS }}"
        WINDOWS_VERSIONS: "{{ docs_vars.WINDOWS_VERSIONS }}"
        AAP_UPPER_ENVIRONMENT: "{{ docs_vars.AAP_UPPER_ENVIRONMENT }}"
        AAP_LOWER_ENVIRONMENT: "{{ docs_vars.AAP_LOWER_ENVIRONMENT }}"
        ORG_SDLC_ENVIRONMENTS: "{{ docs_vars.ORG_SDLC_ENVIRONMENTS }}"
        IDENTITY_MANAGEMENT_SYSTEM: "{{ docs_vars.IDENTITY_MANAGEMENT_SYSTEM }}"
        AAP_RBAC_PROVIDER: "{{ docs_vars.AAP_RBAC_PROVIDER }}"
        AAP_LOAD_BALANCER: "{{ docs_vars.AAP_LOAD_BALANCER }}"
        AAP_INVENTORY_MANAGEMENT: "{{ docs_vars.AAP_INVENTORY_MANAGEMENT }}"
        AAP_CREDENTIAL_STORAGE: "{{ docs_vars.AAP_CREDENTIAL_STORAGE }}"
        AAP_REGISTRY_URL: "{{ docs_vars.AAP_REGISTRY_URL }}"
        AAP_CI_CD_SYSTEM: "{{ docs_vars.AAP_CI_CD_SYSTEM }}"
        AAP_CI_CD_PIPELINE: "{{ docs_vars.AAP_CI_CD_PIPELINE }}"
        AAP_CODE_REPOSITORY: "{{ docs_vars.AAP_CODE_REPOSITORY }}"
        AAP_CHANGE_MANAGEMENT_SYSTEM: "{{ docs_vars.AAP_CHANGE_MANAGEMENT_SYSTEM }}"
        AAP_JOB_EXECUTION_POLICY: "{{ docs_vars.AAP_JOB_EXECUTION_POLICY }}"
        AAP_COMPLIANCE_AUDIT_FREQUENCY: "{{ docs_vars.AAP_COMPLIANCE_AUDIT_FREQUENCY }}"
        AAP_NETWORK_TECH: "{{ docs_vars.AAP_NETWORK_TECH }}"
        AAP_SECURITY_TECH: "{{ docs_vars.AAP_SECURITY_TECH }}"
        AAP_COMPUTE_TECH: "{{ docs_vars.AAP_COMPUTE_TECH }}"
        AAP_CONFIG_MANAGEMENT_TECH: "{{ docs_vars.AAP_CONFIG_MANAGEMENT_TECH }}"
        AAP_STORAGE_TECH: "{{ docs_vars.AAP_STORAGE_TECH }}"
        AAP_IAM_TECH: "{{ docs_vars.AAP_IAM_TECH }}"
        AAP_SERVICE_MGMT_TECH: "{{ docs_vars.AAP_SERVICE_MGMT_TECH }}"
        AAP_CONTAINERIZATION_TECH: "{{ docs_vars.AAP_CONTAINERIZATION_TECH }}"
        AAP_APPLICATION_MGMT_TECH: "{{ docs_vars.AAP_APPLICATION_MGMT_TECH }}"
        AAP_SECURITY_AND_COMPLIANCE: "{{ docs_vars.AAP_SECURITY_AND_COMPLIANCE }}"
        AAP_INTEGRATION_POINTS: "{{ docs_vars.AAP_INTEGRATION_POINTS }}"
        AAP_PYTHON_DEPENDENCIES: "{{ docs_vars.AAP_PYTHON_DEPENDENCIES }}"
        AAP_PREFERRED_GALAXY_COLLECTIONS: "{{ docs_vars.AAP_PREFERRED_GALAXY_COLLECTIONS }}"
        AAP_METRICS: "{{ docs_vars.AAP_METRICS }}"
        AAP_ROLE_DOMAINS: "{{ docs_vars.AAP_ROLE_DOMAINS }}"
        project_status: "{{ docs_vars.project_status | default('In Review') }}"
      loop: "{{ aap_templates }}"
      register: template_results

    - name: "📄 Extract frontmatter metadata from rendered files"
      ansible.builtin.shell: |
        if head -1 "{{ output_dir }}/rendered/{{ item.name }}.md" | grep -q "^---$"; then
          sed -n '2,/^---$/p' "{{ output_dir }}/rendered/{{ item.name }}.md" | head -n -1 > "{{ output_dir }}/metadata/{{ item.name }}_metadata.yaml"
          # Create content without frontmatter
          sed '1,/^---$/d' "{{ output_dir }}/rendered/{{ item.name }}.md" | tail -n +1 > "{{ output_dir }}/rendered/{{ item.name }}_content.md"
        else
          # No frontmatter, use entire file as content
          cp "{{ output_dir }}/rendered/{{ item.name }}.md" "{{ output_dir }}/rendered/{{ item.name }}_content.md"
          echo "{}" > "{{ output_dir }}/metadata/{{ item.name }}_metadata.yaml"
        fi
      loop: "{{ aap_templates }}"

    - name: "📊 Generate publishing summary"
      ansible.builtin.template:
        src: templates/publishing_summary.j2
        dest: "{{ output_dir }}/publishing_summary.md"
        mode: '0644'
      vars:
        templates_processed: "{{ aap_templates | length }}"
        timestamp: "{{ ansible_date_time.iso8601 }}"
        git_ref: "{{ ansible_env.GITHUB_REF_NAME | default('unknown') }}"
        git_sha: "{{ ansible_env.GITHUB_SHA | default('unknown') }}"

    - name: "✅ Display processing results"
      ansible.builtin.debug:
        msg: |
          🎉 AAP Documentation Processing Complete!
          
          📁 Files processed: {{ aap_templates | length }}
          📂 Output directory: {{ output_dir }}
          
          📋 Generated files:
          {% for template in aap_templates %}
          - {{ template.name }}.md (rendered template)
          - {{ template.name }}_content.md (content only)
          - {{ template.name }}_metadata.yaml (Confluence metadata)
          {% endfor %}
          
          🔧 Next steps:
          {% if dry_run %}
          - Review rendered files in {{ output_dir }}/rendered/
          - Check metadata files in {{ output_dir }}/metadata/
          - Run with dry_run=false to publish to Confluence
          {% else %}
          - Files are ready for Confluence publishing
          - Check publishing_summary.md for details
          {% endif %}

    - name: "🚀 Publish to Confluence (if not dry run)"
      ansible.builtin.debug:
        msg: |
          📝 Confluence Publishing would occur here if not in dry-run mode.
          
          Configuration:
          - URL: {{ confluence_config.url | default('Not configured') }}
          - Space: {{ confluence_config.space_key | default('Not configured') }}
          - User: {{ confluence_config.username | default('Not configured') }}
          - Dry Run: {{ dry_run }}
          
          To enable actual publishing:
          1. Set up Confluence secrets in GitHub
          2. Configure confluence_config variables
          3. Set dry_run=false
          4. Implement Confluence API calls
      when: not dry_run

    - name: "📁 List generated files"
      ansible.builtin.find:
        paths: "{{ output_dir }}"
        patterns: "*"
        recurse: true
      register: output_files

    - name: "📋 File listing for artifacts"
      ansible.builtin.debug:
        msg: |
          📁 Generated files for artifact upload:
          {% for file in output_files.files %}
          - {{ file.path | regex_replace('^.*/output/confluence/', '') }}
          {% endfor %}
