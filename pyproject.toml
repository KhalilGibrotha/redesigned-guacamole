[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "redesigned-guacamole"
version = "1.0.0"
description = "Ansible Automation Platform Documentation and CI/CD Pipeline"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "DevOps Team", email = "devops@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Documentation",
    "Topic :: Software Development :: Documentation",
    "Topic :: System :: Systems Administration"
]
dependencies = [
    "requests>=2.25.0",
    "pyyaml>=5.4.0",
    "jinja2>=3.0.0",
    "click>=8.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=2.10.0",
    "black>=21.0.0",
    "flake8>=4.0.0",
    "pylint>=2.12.0",
    "mypy>=0.910",
    "isort>=5.9.0",
    "bandit>=1.7.0",
    "safety>=1.10.0",
    "pre-commit>=2.15.0"
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.15.0"
]
testing = [
    "pytest>=6.0.0",
    "pytest-cov>=2.10.0",
    "pytest-xdist>=2.4.0",
    "pytest-mock>=3.6.0",
    "factory-boy>=3.2.0",
    "faker>=8.0.0"
]

[project.urls]
Homepage = "https://github.com/example/redesigned-guacamole"
Documentation = "https://redesigned-guacamole.readthedocs.io/"
Repository = "https://github.com/example/redesigned-guacamole.git"
"Bug Tracker" = "https://github.com/example/redesigned-guacamole/issues"

[project.scripts]
confluence-publisher = "scripts.confluence_publisher:main"
confluence-manager = "scripts.confluence_manager:main"
docs-discover = "scripts.discover_docs:main"

# Tool configurations
[tool.setuptools]
packages = ["scripts"]

[tool.setuptools.package-dir]
scripts = "scripts"

# Black code formatter configuration
[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
)/
'''
skip-string-normalization = false
skip-magic-trailing-comma = false

# isort import sorting configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["scripts", "tests"]
known_first_party = ["scripts"]
known_third_party = ["requests", "yaml", "jinja2", "click", "pytest"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# MyPy type checking configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
ignore_missing_imports = true

# Paths to check
files = ["scripts", "tests"]

# Exclude patterns
exclude = [
    "build/",
    "dist/",
    "\\.venv/",
    "\\.git/",
    "__pycache__/",
    "\\.pytest_cache/",
    "\\.mypy_cache/"
]

# Per-module options
[[tool.mypy.overrides]]
module = [
    "requests.*",
    "yaml.*",
    "jinja2.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=scripts",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
testpaths = [
    "tests"
]
python_files = [
    "test_*.py",
    "*_test.py"
]
python_classes = [
    "Test*"
]
python_functions = [
    "test_*"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "smoke: marks tests as smoke tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

# Coverage configuration
[tool.coverage.run]
source = ["scripts"]
omit = [
    "*/tests/*",
    "*/.venv/*",
    "*/venv/*",
    "setup.py"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit security linting configuration
[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv", "build", "dist"]
skips = [
    "B101",  # Test for use of assert
    "B601"   # Parameterized shell injection (if using shell=True appropriately)
]

# Bandit test configurations
tests = [
    "B102",  # Test for use of exec
    "B103",  # Test for setting a bad file permission
    "B104",  # Test for binding to all interfaces
    "B105",  # Test for use of hard coded password strings
    "B106",  # Test for use of hard coded password function arguments
    "B107",  # Test for use of hard coded password default arguments
    "B108",  # Test for insecure usage of tmp file/directory
    "B110",  # Test for a try/except with pass
    "B112",  # Test for a try/except continue
    "B201",  # Test for use of flask with debug=True
    "B301",  # Test for use of pickle/cpickle
    "B302",  # Test for use of marshal.load/loads
    "B303",  # Test for use of md5 hash
    "B304",  # Test for use of insecure cipher
    "B305",  # Test for use of insecure cipher modes
    "B306",  # Test for use of mktemp_q
    "B307",  # Test for use of eval
    "B308",  # Test for use of mark_safe
    "B309",  # Test for use of HTTPSConnection with check_hostname disabled
    "B310",  # Test for use of urllib with debuglevel
    "B311",  # Test for use of random module for security
    "B312",  # Test for use of telnet
    "B313",  # Test for use of xml.sax
    "B314",  # Test for use of xml.etree.ElementTree
    "B315",  # Test for use of xml.dom.minidom
    "B316",  # Test for use of xml.dom.pulldom
    "B317",  # Test for use of xml.sax xmlreader
    "B318",  # Test for use of xml.dom.expatbuilder
    "B319",  # Test for use of xml.sax xmlparse
    "B320",  # Test for use of lxml
    "B321",  # Test for use of ftplib
    "B322",  # Test for use of input function
    "B323",  # Test for use of unverified context
    "B324",  # Test for hashlib use
    "B325",  # Test for use of tempnam
]

# Flake8 configuration to work with Black
[tool.flake8]
max-line-length = 120
extend-ignore = [
    "E203",  # Whitespace before ':' (conflicts with Black)
    "E501",  # Line too long (handled by Black)
    "W503",  # Line break before binary operator (conflicts with Black)
    "W504",  # Line break after binary operator (conflicts with Black)
    "E231",  # Missing whitespace after ',' (handled by Black)
    "E701",  # Multiple statements on one line (handled by Black)
    "C901",  # Function is too complex (we'll use pylint for this)
]
exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    "build",
    "dist",
    ".venv",
    "venv",
]

# Pylint configuration
[tool.pylint]
max-line-length = 120

[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name (often conflicts with common patterns)
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0613",  # Unused argument
    "R0801",  # Similar lines in files
]

[tool.pylint.format]
max-line-length = 120
