---
# Molecule test playbook for confluence automation

- name: Converge
  hosts: all
  import_playbook: ../../playbook.yml

  vars:
    # Test variables - override sensitive values for testing
    project_name: "Test Project"
    env: "Test"
    database_url: "https://test-database.example.com"
    confluence_url: "https://test.atlassian.net/wiki"
    confluence_space: "TEST"
    confluence_auth: "dGVzdDp0ZXN0"  # base64 encoded "test:test"
    child_pages:
      - title: "Test Page 1"
        file: "test_page1.md"
      - title: "Test Page 2"
        file: "test_page2.md"
    monitoring_tool: "Test Monitor"

  tasks:
    # Install dependencies
    - name: "Install required packages"
      ansible.builtin.package:
        name:
          - pandoc
          - curl
        state: present
      become: true

    # Create test templates
    - name: "Create test template directory"
      ansible.builtin.file:
        path: /tmp/docs
        state: directory
        mode: '0755'

    - name: "Create test markdown templates"
      ansible.builtin.copy:
        content: |
          # {{ project_name }} Documentation

          Environment: {{ env }}
          Database: {{ database_url }}
          Monitoring: {{ monitoring_tool }}

          This is a test template for {{ item.title }}.
        dest: "/tmp/docs/{{ item.file }}.j2"
        mode: '0644'
      loop: "{{ child_pages }}"

    - name: "Create main template"
      ansible.builtin.copy:
        content: |
          # {{ project_name }} Main Documentation

          Environment: {{ env }}

          ## Overview
          This is the main documentation page.

          ## Child Pages
          {% for page in child_pages %}
          - {{ page.title }}
          {% endfor %}
        dest: "/tmp/docs/main.md.j2"
        mode: '0644'

    # Test template rendering (without actual Confluence API calls)
    - name: "Test template rendering"
      ansible.builtin.template:
        src: "/tmp/docs/{{ item }}"
        dest: "/tmp/{{ item | basename | replace('.j2', '') }}"
        mode: '0644'
      loop:
        - main.md.j2
        - test_page1.md.j2
        - test_page2.md.j2

    # Test pandoc conversion
    - name: "Test Markdown to HTML conversion"
      ansible.builtin.command: >
        pandoc /tmp/{{ item }} -f markdown -t html -o /tmp/{{ item }}.html
      loop:
        - main.md
        - test_page1.md
        - test_page2.md
      changed_when: true

    # Verify files were created
    - name: "Verify HTML files exist"
      ansible.builtin.stat:
        path: "/tmp/{{ item }}.html"
      register: html_files
      loop:
        - main.md
        - test_page1.md
        - test_page2.md

    - name: "Assert HTML files were created"
      ansible.builtin.assert:
        that:
          - item.stat.exists
        fail_msg: "HTML file {{ item.item }}.html was not created"
        success_msg: "HTML file {{ item.item }}.html created successfully"
      loop: "{{ html_files.results }}"
